apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  annotations:
    workflows.argoproj.io/description: |
      A basic CI leveraging Argo Workflows.

      The Workflow...

      * pulls a repo from git. Specifically pulling a branch based on a pull request;
      * merges the target branch into it;
      * modifies the html that will be copied into the container to inject the unique name of the running workflow;
      * builds a container from a Dockerfile and pushes to a registry;
      * deploys an Argo CD application that uses the newly-built container to deploy a static website.

      It does not pretend to be a definitive example, but it aims to inspire. In order to make this a semi-usable example, we have cut a number of security corners. Please don't just blindly run this in production.
    workflows.argoproj.io/maintainer: Pipekit Inc
    workflows.argoproj.io/maintainer_url: https://github.com/pipekit/argo-workflows-ci-example
    workflows.argoproj.io/version: '>= 3.5.2'
  name: hera-rollouts-workflow
  namespace: argo
spec:
  arguments:
    parameters:
    - name: app_repo
      value: ''
    - name: git_branch
      value: ''
    - name: target_branch
      value: ''
    - name: container_tag
      value: ''
    - name: container_image
      value: ''
    - name: dockerfile
      value: ''
    - name: path
      value: ''
  entrypoint: main
  templates:
  - dag:
      tasks:
      - name: git-checkout-pr
        template: git-checkout-pr
      - depends: git-checkout-pr
        name: html-modifier
        template: html-modifier
      - depends: html-modifier
        name: container-build
        template: container-build
      - depends: container-build
        name: deploy-resource-svc
        template: deploy-resource-svc
      - depends: container-build
        name: deploy-resource-ingress
        template: deploy-resource-ingress
      - depends: container-build
        name: deploy-resource-deployment
        template: deploy-resource-deployment
    name: main
  - activeDeadlineSeconds: 1200
    container:
      command:
      - sh
      - -c
      - |
        apk --update add git

        cd /workdir
        echo "Start Clone of source branch"
        git clone https://github.com/pipekit/{{workflow.parameters.app_repo}}.git
        cd {{workflow.parameters.app_repo}}

        ## These lines are a hack just for the example.
        git config --global --add safe.directory /workdir/{{workflow.parameters.app_repo}}
        git config --global user.email "sales@pipekit.io"
        git config --global user.name "Tim Collins"

        git checkout {{workflow.parameters.git_branch}}

        echo "Merge in target branch"
        git merge origin/{{workflow.parameters.target_branch}}

        echo "Complete."
      image: alpine:latest
      resources:
        requests:
          cpu: 4m
          memory: 250Mi
      volumeMounts:
      - mountPath: /workdir
        name: workdir
    name: git-checkout-pr
  - activeDeadlineSeconds: 1200
    container:
      command:
      - sh
      - -c
      - |
        cd /workdir/{{workflow.parameters.app_repo}}/CI

        if grep -q CHANGEMEPLEASE index.html; then
          cat index.html | sed -E 's/CHANGEMEPLEASE/{{workflow.name}} and it used nfs-server-provisioner for artifact passing./g' > tmp_index.html
          mv tmp_index.html index.html
        else
          echo "CHANGEMEPLEASE was not found in index.html. Exiting"
          exit 1
        fi

        cat index.html
      image: ubuntu:latest
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      volumeMounts:
      - mountPath: /workdir
        name: workdir
    name: html-modifier
  - activeDeadlineSeconds: 1200
    container:
      command:
      - sh
      - -c
      - |
        echo "Retrieving git clone..." && cp -R /workdir/{{workflow.parameters.app_repo}} /container-build && buildctl-daemonless.sh build --frontend dockerfile.v0 --local context=/container-build/{{workflow.parameters.app_repo}}{{workflow.parameters.path}} --local dockerfile=/container-build/{{workflow.parameters.app_repo}}{{workflow.parameters.path}} --opt filename={{workflow.parameters.dockerfile}} --output type=image,name={{workflow.parameters.container_image}}:{{workflow.parameters.container_tag}},push=true,registry.insecure=true
      env:
      - name: BUILDKITD_FLAGS
        value: --oci-worker-no-process-sandbox
      image: moby/buildkit:v0.12.3-rootless
      resources:
        requests:
          cpu: '1'
          memory: 1Gi
      securityContext:
        runAsGroup: 1000
        runAsUser: 1000
        seccompProfile:
          type: Unconfined
      volumeMounts:
      - mountPath: /container-build
        name: container-build
      - mountPath: /workdir
        name: workdir
    name: container-build
  - name: deploy-resource-svc
    resource:
      action: apply
      manifest: |
        apiVersion: v1
        kind: Service
        metadata:
          name: example-application
          namespace: final-application
        spec:
          type: ClusterIP
          ports:
            - port: 80
              targetPort: 80
          selector:
            app: example-application
  - name: deploy-resource-ingress
    resource:
      action: apply
      manifest: |
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: example-application
          namespace: final-application
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /$1
            nginx.ingress.kubernetes.io/use-regex: 'true'
        spec:
          ingressClassName: nginx
          rules:
          - host: localhost
            http:
              paths:
              - path: /workflows-ci-example/(.*)
                pathType: Prefix
                backend:
                  service:
                    name: example-application
                    port:
                      number: 80
          tls:
          - hosts:
            - localhost
            secretName: tls.localhost
  - name: deploy-resource-deployment
    resource:
      action: apply
      manifest: |
        apiVersion: argoproj.io/v1alpha1
        kind: Rollout
        metadata:
          name: example-application
          namespace: final-application
          labels:
            app: example-application
        spec:
          replicas: 5
          strategy:
            canary:
              steps:
              - setWeight: 20
              - pause: {duration: 10}
              - setWeight: 40
              - pause: {duration: 10}
              - setWeight: 60
              - pause: {duration: 10}
              - setWeight: 80
              - pause: {duration: 10}
          selector:
            matchLabels:
              app: example-application
          template:
            metadata:
              labels:
                app: example-application
            spec:
              containers:
                - name: eg-app
                  image: k3d-registry.localhost:5000/hello-world:{{workflow.parameters.container_tag}}
                  imagePullPolicy: Always
                  readinessProbe:
                    failureThreshold: 3
                    httpGet:
                      path: /
                      port: 80
                      scheme: HTTP
                    initialDelaySeconds: 5
                    periodSeconds: 5
                    successThreshold: 1
                    timeoutSeconds: 1
                  resources:
                    requests:
                      cpu: 3m
                      memory: 20Mi
                    limits:
                      cpu: 10m
                      memory: 64Mi
      successCondition: status.phase == Healthy
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 1Gi
      storageClassName: nfs
  volumes:
  - emptyDir: {}
    name: container-build
